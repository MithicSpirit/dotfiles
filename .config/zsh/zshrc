#!/hint/zsh

## Built-in configuration tools:
# The following lines were added by compinstall

zstyle ':completion:*' completer _oldlist _expand _complete _ignored _match _prefix
zstyle ':completion:*' list-colors ''
zstyle ':completion:*' matcher-list 'm:{[:lower:]}={[:upper:]}' 'r:|[._-/]=** r:|=**' 'm:{[:lower:][:upper:]}={[:upper:][:lower:]}' 'l:|=* r:|=*'
zstyle ':completion:*' menu select=0
zstyle ':completion:*' original false
zstyle ':completion:*' select-prompt '%SScrolling active: current selection at %p%s'
zstyle ':completion:*' verbose true
zstyle :compinstall filename '/home/mithic/.config/zsh/.zshrc'

autoload -Uz compinit
compinit
# End of lines added by compinstall
# Lines configured by zsh-newuser-install
HISTFILE="$ZDOTDIR/histfile"
HISTSIZE=9999
SAVEHIST=9999
setopt extendedglob
unsetopt beep nomatch notify
bindkey -e
# End of lines configured by zsh-newuser-install

# Plugins
MODULES=(
    "zsh/complist"
    "zsh/mapfile"
    "zsh/mathfunc"
    "zsh/parameter"
    "zsh/regex"
    "zsh/termcap"
    "zsh/terminfo"
    "zsh/zle"
    "zsh/zleparameter"
)
for i in $MODULES; do zmodload $i; done
[[ $COLORTERM = *(24bit|truecolor)* ]] || zmodload zsh/nearcolor

PLUGINPATH="$ZDOTDIR/plugins"
PLUGINS=(
    "/usr/share/autojump/autojump.zsh"
    "~/.autojump/share/autojump/autojump.zsh"
    "/usr/share/doc/pkgfile/command-not-found.zsh"
    "$PLUGINPATH/zsh-autosuggestions/zsh-autosuggestions.zsh"
    "$PLUGINPATH/zsh-completions/zsh-completions.plugin.zsh"
    "$PLUGINPATH/zsh-history-substring-search/zsh-history-substring-search.zsh"
    "$PLUGINPATH/globalias.zsh"
    "$PLUGINPATH/fg-keybind.zsh"
    "$ZDOTDIR/aliases.zsh"
    "$PLUGINPATH/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh"
)
for i in $PLUGINS; do [[ -f $i ]] && source $i; done

# Plugin Config
ZSH_AUTOSUGGEST_STRATEGY=(history completion)
ZSH_AUTOSUGGEST_HIGHLIGHT_STYLE='fg=7'
ZSH_AUTOSUGGEST_ACCEPT_WIDGETS=("${(@)ZSH_AUTOSUGGEST_ACCEPT_WIDGETS:#forward-char}")
ZSH_AUTOSUGGEST_PARTIAL_ACCEPT_WIDGETS+=(forward-char)

ZSH_HIGHLIGHT_HIGHLIGHTERS=(main brackets)
ZSH_HIGHLIGHT_STYLES[bracket-error]='fg=red,bold'
ZSH_HIGHLIGHT_STYLES[bracket-level-1]='fg=12'
ZSH_HIGHLIGHT_STYLES[bracket-level-2]='fg=magenta'
ZSH_HIGHLIGHT_STYLES[bracket-level-3]='fg=green'
ZSH_HIGHLIGHT_STYLES[bracket-level-4]='fg=blue'
unset ZSH_HIGHLIGHT_STYLES[bracket-level-5]

# Keybinds
__autoload_bindkey () {
    local new_func="${@[-1]}"
    autoload "$new_func"
    zle -N "$new_func"
    bindkey "$@"
}
bindkey "^Z" fg
bindkey "^P" history-substring-search-up
bindkey "^N" history-substring-search-down
bindkey "^[p" up-line-or-history
bindkey "^[n" down-line-or-history
__autoload_bindkey "^[e" edit-command-line
bindkey -M menuselect "^P" up-line-or-history
bindkey -M menuselect "^N" down-line-or-history
bindkey -M menuselect "^F" forward-char
bindkey -M menuselect "^B" backward-char

# Options
setopt auto_pushd # Push new dirs sonto dirstack automatically
unsetopt flow_control # Allows ^Q and ^S to work
setopt auto_continue # Automatically CONT disowned jobs
setopt prompt_sp # Show $PROMPT_EOL_MARK (see below) when last command missing ending EOL
setopt HIST_REDUCE_BLANKS # Remove unnecessary blank lines from history

# Misc
WORDCHARS="_-.~=!#$%^()<>&|"
ZLE_RPROMPT_INDENT=0 # Remove unnecessary padding
PROMPT_EOL_MARK="$(printf '%%{\033[0m\033[7m\033[1m%%}%%#%%{\033[0m%%}')"
  # ^ reset color before printing prompt_sp (see above)
unset LINES COLUMNS # Can fix some bugs
command -v starship &>/dev/null && eval "$(starship init zsh)" # Starship prompt
__escape_aliases # See globalias

# Linux TTY
if [[ "$TERM" = "linux" ]]; then
    clear () {
        echo -en "\e]P01C1F2B" #black
        echo -en "\e]P1FF5370" #darkred
        echo -en "\e]P2C3E88D" #darkgreen
        echo -en "\e]P3FFCB6B" #brown
        echo -en "\e]P482AAFF" #darkblue
        echo -en "\e]P5C792EA" #darkmagenta
        echo -en "\e]P689DDFF" #darkcyan
        echo -en "\e]P7A6ACCD" #lightgrey
        echo -en "\e]P8545760" #darkgrey
        echo -en "\e]P9FF7E93" #red
        echo -en "\e]PAD2EDA9" #green
        echo -en "\e]PBFFD890" #yellow
        echo -en "\e]PCA1BFFF" #blue
        echo -en "\e]PDD5ADEF" #magenta
        echo -en "\e]PEA6E5FF" #cyan
        echo -en "\e]PFBCC0D9" #white
        tput clear
    }
    clear
fi

# Emacs vterm
if [[ "$INSIDE_EMACS" = 'vterm' && -n ${EMACS_VTERM_PATH} &&
          -f "${EMACS_VTERM_PATH}/etc/emacs-vterm-zsh.sh" ]]; then
    source "${EMACS_VTERM_PATH}/etc/emacs-vterm-zsh.sh"
    __clear_vterm="${aliases[clear]}"
    unalias clear
    clear () { eval "$__clear_vterm" }
fi

true # prevent above error codes from affecting prompt
