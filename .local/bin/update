#!/usr/bin/env zsh

[[ ! ( -t 1 && -t 2 ) && -n "$TERMINAL" ]] && exec ${=TERMINAL} -e "$0" "$@"

command -v tmux &>/dev/null && [[ -z "$TMUX" ]] &&
	exec tmux new-session -As update "$0" "$@"
sleep 0.1
unset LINES COLUMNS DISPLAY
trap '' INT

###########
## UTILS ##
###########
function bcursor { echo '\033[2 q' 1>&2 }  # force block cursor
function tcursor { echo '\033[2 q' 1>&2 }  # reset to terminal cursor (manually change)
function pager { eval "$@" | "${=PAGER:-less}" }
function now { date -u '+%Y-%m-%d@%H:%M:%S' }
function nice_ { time nice -n20 "$@" }
function dialog_ { bcursor; dialog "$@" 3>&1 1>&2 2>&3 }

function clear_input
{
	while true; do
		read -t 0 -sk 1 || break
	done
	return 0
}

function read_ {
	clear_input
	read "$@"
}

function proceed
{
	echo
	read_ -rs '?[Press Enter to proceed]'
	echo
}

function confirm
{
	read_ -r 'input?[y/n] '
	while true; do
		[[ "$input" =~ "[yY].*" ]] && return 0
		[[ "$input" =~ "[nN].*" ]] && return 1
		read_ -r 'input?Please respond with `y` or `n`: '
	done
}

function handle_failure
{
	echo '\nScript failure detected!'
	notify-send 'An issue has occurred during the update'
	while true; do
		[[ "$(read_ -re '?[Type `ok` to continue] ')" =~ "[oO][kK]" ]] &&
			break
	done
}

function rm_ {
	if command -v trash >/dev/null; then
		echo "Removing $@ with trash"
		trash "$@"
	else
		echo "Removing $@ with rm -rf"
		rm -rfv "$@"
	fi
}


##########
## MAIN ##
##########
function main
{
	while true; do
		sel="$(dialog_ --menu 'Update' 0 0 0 \
			'prep' 'Prepare system for large updates' \
			'core' 'Update core system packages (pacman/AUR)' \
			'other' 'Update other packaging systems' \
			'misc' 'Update non-packages' \
		)" || { clear -x; tcursor; exit 0 }
		case "$sel" in
			prep) _prep;;
			core) _core;;
			other) _other;;
			misc) _misc;;
			*) clear -x; tcursor; exit 2;;
		esac
	done
}

#################
## PREPARATION ##
#################
function _prep
{
	while true; do
		sel="$(dialog_ --menu 'Preparation' 0 0 0 \
			'verify' 'Verify and cache with sudo' \
			'stop' 'Stop programs' \
			'view' 'View processes with system monitoring tools' \
			'shell' 'Drop down into shell' \
		)" || return 1
		case "$sel" in 
			verify) _prep_verify;;
			stop) _prep_stop;;
			view) _prep_view;;
			shell) _prep_shell;;
		esac
	done
}

function _prep_verify
{
	clear -x
	tcursor
	sudo -v
	proceed
}

function _prep_stop
{
	sel="$(dialog_ --checklist 'Stop programs' 0 0 0 \
		'emacs' 'Stop systemd emacs daemon service' 'off' \
		'replay' 'Stop replay sorcery and -kms systemd service' 'off' \
		'lbry' 'Stop lbry through flatpak' 'off' \
		'discord' 'Stop discord through flatpak' 'off' \
		'signal' 'Stop signal' 'off' \
		'akonadi' 'Stop akonadi server and clients' 'off' \
	)" || return 1
	[[ -n "$sel" ]] || return 1
	clear -x
	tcursor
	text=''
	function killallme { killall -eiu "$(whoami)" -SIGTERM "$@"; sleep 0.2; }
	[[ "$sel" =~ '.*emacs.*' ]] && {
		[[ -n "$text" ]] && echo
		echo 'Emacs:'
		systemctl --user stop emacs.service
		text+='emacs '
	}
	[[ "$sel" =~ '.*replay.*' ]] && {
		echo 'Replay sorcery:'
		killallme replay-sorcery
		sudo systemctl stop replay-sorcery-kms.service
		text+='replay '
	}
	[[ "$sel" =~ '.*lbry.*' ]] && {
		echo 'LBRY:'
		flatpak kill io.lbry.lbry-app
		text+='lbry '
	}
	[[ "$sel" =~ '.*discord.*' ]] && {
		echo 'Discord:'
		flatpak kill com.discordapp.Discord
		flatpak kill com.discordapp.DiscordCanary
		text+='discord '
	}
	[[ "$sel" =~ '.*signal.*' ]] && {
		echo 'Signal:'
		killallme signal-desktop
		text+='signal '
	}
	[[ "$sel" =~ '.*akonadi.*' ]] && {
		echo 'KMail:'
		killallme kmail korganizer kalendar kalendarac
		akonadictl stop
		text+='akonadi '
	}
	proceed
	[[ -n "$text" ]] || return 2
	return 0
}

function _prep_view
{
	while true; do
		sel="$(dialog_ --menu 'System monitoring tools' 0 0 0 \
			'btop' 'View with `btop`' \
			'btm' 'View with `btm`' \
			'htop' 'View with `htop`' \
		)" || return 1
		case "$sel" in 
			btop) _prep_view_btop;;
			btm) _prep_view_btm;;
			htop) _prep_view_htop;;
		esac
	done
}
function _prep_view_btop
{
	clear -x
	tcursor
	btop
	proceed
}
function _prep_view_btm
{
	clear -x
	tcursor
	btm -b
	proceed
}
function _prep_view_htop
{
	clear -x
	tcursor
	htop
	proceed
}

function _prep_shell
{
	clear -x
	tcursor
	(
		cd "$HOME" || exit 2
		exec zsh -i
	)
	proceed
}


#################################
## CORE PACKAGE MANAGER (alpm) ##
#################################
function _core
{
	while true; do
		sel="$(dialog_ --menu 'Core package manager' 0 0 0 \
			'view' 'View available updates' \
			'clean' 'Clean previous installs' \
			'update' 'Run updates' \
			'local' 'Drop into shell in local custom packages directory' \
			'check' 'Check for potentially broken packages' \
			'diff' 'View .pacorig/new/save files' \
		)" || return 1
		case "$sel" in
			view) _core_view;;
			clean) _core_clean;;
			update) _core_update;;
			local) _core_local;;
			check) _core_check;;
			diff) _core_diff;;
			*) return 2;;
		esac
	done
}

function _core_clean
{
	sel="$(dialog_ --checklist 'Check available updates' 0 0 0 \
		'orphan' 'Uninstall orphaned packages' 'off' \
		'localrepo' 'Remove unused packages from local repo' 'on' \
		'purge' 'Purge uninstalled packages from cache' 'off' \
	)" || return 1
	[[ -n "$sel" ]] || return 1
	clear -x
	tcursor
	text=''
	[[ "$sel" =~ ".*orphan.*" ]] && {
		echo 'Orphans:'
		paru -c
		text+='orphan '
		proceed
	}
	[[ "$sel" =~ ".*localrepo.*" ]] && {
		echo 'Local Repo:'
		packages="$(paru -Ll | rg -v '\[installed\]' | awk '{print $2}')"
		if [[ $(echo "$packages" | wc -l) -gt 10 ]]; then
			echo "$packages"
			echo 'Too many packages! Please manually confirm and fix.'
			proceed
			return 1
		elif [[ -n "$packages" ]]; then
			echo "$packages"
			echo -n 'Are you sure you wish to delete these packages? '
			confirm || return 1
			xargs paru -Ld <<<"$packages"
		else
			echo 'No unused packages in local repo.'
		fi
		text+='localrepo '
		proceed
	}
	[[ "$sel" =~ ".*purge.*" ]] && {
		echo 'Purging:'
		paru -Sc
		text+='purge '
		proceed
	}
	[[ -n "$text" ]] || return 2
	return 0
}

function _core_view
{
	sel="$(dialog_ --checklist 'Check available updates' 0 0 0 \
		'repos' 'Check main repos for updates' 'on' \
		'aur' 'Check AUR for updates' 'on' \
	)" || return 1
	[[ -n "$sel" ]] || return 1
	clear -x
	tcursor
	command=''
	[[ "$sel" =~ '.*repos.*' ]] && {
		command+="
			echo 'Main:'
			checkupdates
			echo
		"
	}
	[[ "$sel" =~ '.*aur.*' ]] && {
		command+="
			echo 'AUR:'
			paru -Qu --mode=ap --color=always | grep --color=never -v '\[ignored\]'
			echo
		"
	}
	[[ -n "$command" ]] || return 2
	command+='echo "Done"'
	pager "$command"
	proceed
	return 0
}

function _core_update
{
	sel="$(dialog_ --checklist 'Run updates' 0 0 0 \
		'repos' 'Update from repos' 'on' \
		'aur' 'Update from AUR' 'on' \
	)" || return 1
	[[ -n "$sel" ]] || return 1
	clear -x
	tcursor
	text=''
	[[ "$sel" =~ '.*repos.*' ]] && {
		[[ -n "$text" ]] && echo
		echo 'Main:'
		sudo -v &&
			nice_ paru -Syyuu --repo ||
			handle_failure
		text+='repos '
	}
	[[ "$sel" =~ '.*aur.*' ]] && {
		[[ -n "$text" ]] && {
			echo
			( sleep 7; notify-send 'AUR update pending' ) &
		}
		echo 'AUR:'
		sudo -v &&
			nice_ paru -Syyu --mode=ap ||
			handle_failure
		text+='aur '
	}
	proceed
	[[ -n "$text" ]] || return 2
	return 0
}

function _core_local
{
	clear -x
	tcursor
	(
		cd "$HOME/documents/coding/aur" || exit 2
		exec zsh -i
	)
	proceed
}

function _core_check
{
	clear -x
	tcursor
	pager "
		echo 'Checking packages:'
		checkrebuild -v
		echo \"\\nDone\"
	"
	proceed
}

function _core_diff
{
	clear -x
	tcursor
	sudo DIFFPROG='nvim -d' pacdiff
	proceed
}


#############################
## OTHER PACKAGING SYSTEMS ##
#############################
function _other
{
	while true; do
		sel="$(dialog_ --menu 'Other packaging systems' 0 0 0 \
			'flatpak' 'Update with flatpak' \
		)" || return 1
		case "$sel" in
			flatpak) _other_flatpak;;
			*) return 2;;
		esac
	done
}

function _other_flatpak
{
	sel="$(dialog_ --checklist 'Flatpak updates' 0 0 0 \
		'system' 'Update system packages' 'on' \
		'user' 'Update user packages' 'on' \
	)" || return 1
	[[ -n "$sel" ]] || return 1
	clear -x
	tcursor
	text=''
	[[ "$sel" =~ '.*system.*' ]] && {
		[[ -n "$text" ]] && echo
		echo 'System:'
		sudo -i flatpak update --system
		proceed
		text+='system '
	}
	[[ "$sel" =~ '.*user.*' ]] && {
		[[ -n "$text" ]] && echo
		echo 'User:'
		flatpak update --user
		proceed
		text+='user '
	}
	[[ -n "$text" ]] || return 2
	return 0
}


###################
## MISCELLANEOUS ##
###################
function _misc
{
	while true; do
		sel="$(dialog_ --menu 'Miscellaneous non-packages' 0 0 0 \
			'doom' 'Update Doom Emacs' \
			'vim' 'Update vim-plug plugins' \
			'proton' 'Update the Steam runner Proton-GE' \
			'rustup' 'Update Rust toolchains with rustup' \
			'ghcup' 'Update GHC and related with ghcup' \
		)" || return 1
		case "$sel" in
			doom) _misc_doom;;
			vim) _misc_vim;;
			proton) _misc_proton;;
			rustup) _misc_rustup;;
			ghcup) _misc_ghcup;;
			*) return 2;;
		esac
	done
}

function _misc_doom
{
	while true; do
		sel="$(dialog_ --menu 'Update Doom Emacs' 0 0 0 \
			'view' 'Check for and view updates' \
			'update' 'Run update (doom upgrade; etc.)' \
			'sync' 'Sync without updating (doom sync; etc.)' \
			'doctor' 'Only run doctor without syncing or updating (doom doctor)' \
			'build' 'Build necessary modules' \
			'recomp' 'Recompile necessary modules' \
		)" || return 1
		case "$sel" in
			view) _misc_doom_view;;
			update) _misc_doom_update;;
			sync) _misc_doom_sync;;
			doctor) _misc_doom_doctor;;
			build) _misc_doom_build;;
			recomp) _misc_doom_recomp;;
			*) return 2;;
		esac
	done
}
function _misc_doom_view
{
	clear -x
	tcursor
	(
		cd ~/.config/emacs || return 2
		git fetch || return 2
		git log 'HEAD..origin/master'
	)
	proceed
}
function _misc_doom_update
{
	clear -x
	tcursor
	(
		cd ~/.config/emacs || return 2
		doom upgrade && doom sync -p
		doom doctor
	)
	proceed
}
function _misc_doom_sync
{
	clear -x
	tcursor
	(
		cd ~/.config/emacs || return 2
		doom sync
		doom doctor
	)
	proceed
}
function _misc_doom_doctor
{
	clear -x
	tcursor
	(
		cd ~/.config/emacs || return 2
		doom doctor
	)
	proceed
}
function _misc_doom_build
{
	clear -x
	tcursor
	(
		cd ~/.config/emacs || return 2
		doom build -j "$NUM_BUILD_PROCS" -r
	)
	proceed
}
function _misc_doom_recomp
{
	sel="$(dialog_ --checklist 'Recompile modules' 0 0 0 \
		'vterm' 'Recompile vterm (vterm-module-compile)' 'on' \
		'pdf' 'Recompile pdf tools (pdf-tools-install)' 'on' \
	)" || return 1
	[[ -n "$sel" ]] || return 1
	clear -x
	tcursor
	text=''
	[[ "$sel" =~ '.*vterm.*' ]] && {
		[[ -n "$text" ]] && echo
		echo 'Vterm:'
		emacs -nw --eval='(vterm-module-compile)'
		text+='vterm '
	}
	[[ "$sel" =~ '.*pdf.*' ]] && {
		echo 'pdf:'
		emacs -nw --eval='(pdf-tools-install)'
		text+='pdf '
	}
	proceed
	[[ -n "$text" ]] || return 2
	return 0
}

function _misc_vim
{
	while true; do
		sel="$(dialog_ --menu 'Update Nvim plugins (vim-plug)' 0 0 0 \
			'backup' 'Generate script for restoring snapshot' \
			'self' 'Update vim-plug itself (:PlugUpgrade)' \
			'update' 'Install and update plugins (:PlugInstall, :PlugUpdate)' \
			'diff' 'View changes from last update (:PlugDiff)' \
			'config' 'Open config in Nvim' \
		)" || return 1
		case "$sel" in
			backup) _misc_vim_backup;;
			self) _misc_vim_self;;
			update) _misc_vim_update;;
			diff) _misc_vim_diff;;
			config) _misc_vim_config;;
			*) return 2;;
		esac
	done
}
function _misc_vim_backup
{
	clear -x
	tcursor
	dir="$HOME/.cache/vim-plug-snapshots"
	mkdir -p "$dir"
	nvim "+PlugSnapshot $dir/$(now)"
	proceed
}
function _misc_vim_self
{
	clear -x
	tcursor
	nvim '+PlugUpgrade'
	proceed
}
function _misc_vim_update
{
	clear -x
	tcursor
	nvim '+PlugInstall --sync | PlugUpdate'
	proceed
}
function _misc_vim_diff
{
	clear -x
	tcursor
	nvim '+PlugDiff'
	proceed
}
function _misc_vim_config
{
	clear -x
	tcursor
	nvim "$HOME/.config/nvim/init.vim"
	proceed
}

function _misc_proton
{
	while true; do
		sel="$(dialog_ --menu 'Update Proton-GE' 0 0 0 \
			'backup' 'Backup current prefixes' \
			'protonup' 'Download latest Proton-GE with protonup' \
			'stl' 'Update stl configs to use latest Proton' \
			'restore' 'Restore some backed-up files for supported games' \
		)" || return 1
		case "$sel" in
			backup) _misc_proton_backup;;
			protonup) _misc_proton_protonup;;
			stl) _misc_proton_stl;;
			restore) _misc_proton_restore;;
			*) return 2;;
		esac
	done
}
function _misc_proton_backup
{
	move=''
	dialog_ --yesno \
		'Would you like to backup safely (nondestructive backup)?' \
		0 0 || {
			dialog_ --yesno \
				'Are you sure about this? This may destroy the current prefix.' \
				0 0 && move='yes'
		}

	clear -x
	tcursor
	dir="$HOME/games/bak/steam-prefixes"
	target="$dir/$(now)"
	latest="$dir/latest"
	mkdir -p "$dir"

	echo "Backing up to $target"
	if [[ "$move" == 'yes' ]]; then
		mv -v "$HOME/games/install/steam/steamapps/compatdata" "$target"
	else
		cp -var "$HOME/games/install/steam/steamapps/compatdata" "$target"
	fi

	rm_ "$latest"
	ln -sv "$target" "$latest"
	proceed
}
function _misc_proton_protonup
{
	clear -x
	tcursor
	protonup
	proceed
}
function _misc_proton_stl
{
	clear -x
	tcursor
	(
		cd "$HOME/.config/steamtinkerlaunch/gamecfgs/id"
		newver="$(protonup --list | sort -V | tail -n1 | cut -d' ' -f1)"
		echo "Updating to $newver on the following files:"
		ls *.conf ../../default_template.conf
		sed "/^USEPROTON=/cUSEPROTON=\"$newver\"" \
			-i *.conf ../../default_template.conf
	)
	proceed
}
function _misc_proton_restore
{
	sel="$(dialog_ --checklist \
		'Select which games to restore. Only the listed games are supported' \
		0 0 0 \
		'warframe' 'Warframe (230410)' 'on' \
	)" || return 1
	[[ -n "$sel" ]] || return 1

	run=''
	dialog_ --yesno \
		'The games must be run to regenerate the prefix prior to copying over the data. Would you like for this to occur automatically?' \
		0 0 &&
		run='yes'
	[[ "$run" == 'yes' ]] || {
		dialog_ --msgbox \
			"Please run the following games manually, then hit OK to continue.\n$sel" \
			0 0
		dialog_ --msgbox \
			"Please make sure the prefixes have been generated, then hit OK." \
			0 0
	}

	clear -x
	tcursor
	text=''
	compatdata="$HOME/games/install/steam/steamapps/compatdata"
	backup="$HOME/games/bak/steam-prefixes/latest"
	[[ "$sel" =~ '.*warframe.*' ]] && {
		id=230410
		echo "Warframe ($id):"
		prefix="$compatdata/$id"
		bak="$backup/$id"
		mkdir -p "$prefix"

		[[ "$run" == 'yes' ]] && {
			steam "steam://rungameid/$id"
			echo "Please confirm when the game is done running."
			proceed
			echo "Make sure both steam and the game are closed before proceeding."
			proceed
		}

		dir='pfx/drive_c/users/steamuser/AppData/Local/Warframe'
		echo "Restoring \`$dir\` from backup"
		mkdir -p "$prefix/$dir"
		rm_ "$prefix/$dir"
		cp -var "$bak/$dir" "$prefix/$dir"

		proceed
		text+='warframe '
	}
	[[ -n "$text" ]] || return 2
	return 0
}

function _misc_rustup
{
	pager "
	echo 'Running rustup update:'
	rustup update
	"
}

function _misc_ghcup
{
	clear -x
	ghcup tui
	proceed
}

exec main
