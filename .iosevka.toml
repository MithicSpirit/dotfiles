# Version: 3.7.1
[buildPlans.iosevka-custom]               # <iosevka-custom> is your plan name
family = "Iosevka Mithic"                 # Font menu family name
design = ["VXBU", "VXDD", "cv11", "cv08", "cv86", "VXDC",     # Customize styles
          "cv92", "VXBY", "cv51", "VXAE", "cv97", "cv19", "cv30", "cv36",
          "VXAH", "cv31", "cv38", "VXCK", "VXCZ", "sp-term",
          "sp-force-monospace", "ligset-clike", "ligset-javascript"]
# upright = ["upright-styles"]                    # Customize styles for upright
italic = ["VXCL", "VXBL", "VXBO", "VXCW", # Customize styles for italics
          "cv06", "cv70", "cv10", "VXCQ", "VXCS", "VXDS", "cv49", "VXBH", "VXDA",
          "cv14", "VXAT", "VXBB", "VXBC", "cv18", "cv29", "cv37", "cv33", "cv90",
          "cv62", "cv53", "cv99"]
# oblique = ["oblique-styles"]                    # Customize styles for oblique
# hintParams = ["-a", "sss"]        # Optional custom parameters for ttfautohint

###################################################################################################
# Override default building weights
# When buildPlans.<plan name>.weights is absent, all weights would built and mapped to
# default values.
# IMPORTANT : Currently "menu" and "css" property only support numbers between 0 and 1000.
#             and "shape" properly only supports number between 100 and 900 (inclusive).
#             If you decide to use custom weights you have to define all the weights you
#             plan to use otherwise they will not be built.

[buildPlans.iosevka-custom.weights.thin]
shape = 100
menu  = 100
css   = 100

[buildPlans.iosevka-custom.weights.extralight]
shape = 200
menu  = 200
css   = 200

[buildPlans.iosevka-custom.weights.light]
shape = 300
menu  = 300
css   = 300

[buildPlans.iosevka-custom.weights.regular]
shape = 400
menu  = 400
css   = 400

[buildPlans.iosevka-custom.weights.book]
shape = 450
menu  = 450 
css   = 450

[buildPlans.iosevka-custom.weights.medium]
shape = 500
menu  = 500
css   = 500

[buildPlans.iosevka-custom.weights.semibold]
shape = 600
menu  = 600
css   = 600

[buildPlans.iosevka-custom.weights.bold]
shape = 700
menu  = 700
css   = 700

[buildPlans.iosevka-custom.weights.extrabold]
shape = 800
menu  = 800
css   = 800

[buildPlans.iosevka-custom.weights.heavy]
shape = 900
menu  = 900
css   = 900
# End weight section
###################################################################################################

###################################################################################################
# Override default building slope sets
# Format: <upright|italic|oblique> = <"normal"|"italic"|"oblique">
# When this section is absent, all slopes would be built.

[buildPlans.iosevka-custom.slopes]
upright = "normal"
italic = "italic"
oblique = "oblique"

# End slope section
###################################################################################################

###################################################################################################
# Override default building widths
# When buildPlans.<plan name>.widths is absent, all widths would built and mapped to
# default values.
# IMPORTANT : Currently "shape" property only supports numbers between 434 and 664 (inclusive),
#             while "menu" only supports integers between 1 and 9 (inclusive).
#             The "shape" parameter specifies the unit width, measured in 1/1000 em. The glyphs'
#             width are equal to, or a simple multiple of the unit width.
#             If you decide to use custom widths you have to define all the widths you plan to use,
#             otherwise they will not be built.

[buildPlans.iosevka-custom.widths.normal]
shape = 500        # Unit Width, measured in 1/1000 em.
menu  = 5          # Width grade for the font's names.
css   = "normal"   # "font-stretch' property of webfont CSS.

[buildPlans.iosevka-custom.widths.extended]
shape = 576
menu  = 7
css   = "expanded"

# End width section
###################################################################################################

###################################################################################################
# Character Exclusion
# Specify character ranges in the section below to exclude certain characters from the font being
# built. Remove this section when this feature is not needed.

#[buildPlans.iosevka-custom.exclude-chars]
#ranges = [[10003, 10008]]

# End character exclusion
###################################################################################################

###################################################################################################
# Compatibility Ligatures
# Certain applications like Emacs does not support proper programming liagtures provided by
# OpenType, but can support ligatures provided by PUA codepoints. Therefore you can edit the
# following section to build PUA characters that are generated from the OpenType ligatures.
# Remove this section when compatibility ligatures are not needed.

# [[buildPlans.iosevka-custom.compatibility-ligatures]]
# unicode = 57600 # 0xE100
# featureTag = 'calt'
# sequence = '<*>'

# End compatibility ligatures section
###################################################################################################

###################################################################################################
# Metric overrides
# Certain metrics like line height (leading) could be overridden in your build plan file.
# Edit the values to change the metrics. Remove this section when overriding is not needed.

# [buildPlans.iosevka-custom.metric-override]
# leading = 1250
# winMetricAscenderPad = 0
# winMetricDescenderPad = 0
# powerlineScaleY = 1
# powerlineScaleX = 1
# powerlineShiftY = 0
# powerlineShiftX = 0

# End metric override section
###################################################################################################
